# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  authors(relativePath: String): Authors!
  authorsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorsFilter): AuthorsConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutFilter): AboutConnection!
  contact(relativePath: String): Contact!
  contactConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContactFilter): ContactConnection!
  homepage(relativePath: String): Homepage!
  homepageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomepageFilter): HomepageConnection!
  sections(relativePath: String): Sections!
  sectionsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SectionsFilter): SectionsConnection!
}

input DocumentFilter {
  post: PostFilter
  authors: AuthorsFilter
  pages: PagesFilter
  about: AboutFilter
  contact: ContactFilter
  homepage: HomepageFilter
  sections: SectionsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Post | Authors | Pages | About | Contact | Homepage | Sections | Folder

type Post implements Node & Document {
  title: String!
  date: String!
  image: String
  categories: [String]
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostBodyCalloutFilter {
  type: StringFilter
  content: RichTextFilter
}

input PostBodyImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PostBodyFilter {
  Callout: PostBodyCalloutFilter
  Image: PostBodyImageFilter
}

input PostFilter {
  title: StringFilter
  date: DatetimeFilter
  image: ImageFilter
  categories: StringFilter
  tags: StringFilter
  body: PostBodyFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type AuthorsSocial {
  name: String
  icon: String
  link: String
}

type Authors implements Node & Document {
  title: String!
  email: String
  image: String
  description: String
  social: [AuthorsSocial]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorsSocialFilter {
  name: StringFilter
  icon: StringFilter
  link: StringFilter
}

input AuthorsFilter {
  title: StringFilter
  email: StringFilter
  image: ImageFilter
  description: StringFilter
  social: AuthorsSocialFilter
}

type AuthorsConnectionEdges {
  cursor: String!
  node: Authors
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorsConnectionEdges]
}

type Pages implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesBodyCalloutFilter {
  type: StringFilter
  content: RichTextFilter
}

input PagesBodyFilter {
  Callout: PagesBodyCalloutFilter
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  body: PagesBodyFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type About implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AboutBodyCalloutFilter {
  type: StringFilter
  content: RichTextFilter
}

input AboutBodyFilter {
  Callout: AboutBodyCalloutFilter
}

input AboutFilter {
  title: StringFilter
  description: StringFilter
  body: AboutBodyFilter
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type Contact implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContactFilter {
  title: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type ContactConnectionEdges {
  cursor: String!
  node: Contact
}

type ContactConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContactConnectionEdges]
}

type Homepage implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HomepageBodyCalloutFilter {
  type: StringFilter
  content: RichTextFilter
}

input HomepageBodyFilter {
  Callout: HomepageBodyCalloutFilter
}

input HomepageFilter {
  title: StringFilter
  description: StringFilter
  body: HomepageBodyFilter
}

type HomepageConnectionEdges {
  cursor: String!
  node: Homepage
}

type HomepageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomepageConnectionEdges]
}

type Sections implements Node & Document {
  title: String!
  enable: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input SectionsBodyCalloutFilter {
  type: StringFilter
  content: RichTextFilter
}

input SectionsBodyFilter {
  Callout: SectionsBodyCalloutFilter
}

input SectionsFilter {
  title: StringFilter
  enable: BooleanFilter
  body: SectionsBodyFilter
}

type SectionsConnectionEdges {
  cursor: String!
  node: Sections
}

type SectionsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SectionsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  createAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
  updateContact(relativePath: String!, params: ContactMutation!): Contact!
  createContact(relativePath: String!, params: ContactMutation!): Contact!
  updateHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  createHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  updateSections(relativePath: String!, params: SectionsMutation!): Sections!
  createSections(relativePath: String!, params: SectionsMutation!): Sections!
}

input DocumentUpdateMutation {
  post: PostMutation
  authors: AuthorsMutation
  pages: PagesMutation
  about: AboutMutation
  contact: ContactMutation
  homepage: HomepageMutation
  sections: SectionsMutation
  relativePath: String
}

input DocumentMutation {
  post: PostMutation
  authors: AuthorsMutation
  pages: PagesMutation
  about: AboutMutation
  contact: ContactMutation
  homepage: HomepageMutation
  sections: SectionsMutation
}

input PostMutation {
  title: String
  date: String
  image: String
  categories: [String]
  tags: [String]
  body: JSON
}

input AuthorsSocialMutation {
  name: String
  icon: String
  link: String
}

input AuthorsMutation {
  title: String
  email: String
  image: String
  description: String
  social: [AuthorsSocialMutation]
}

input PagesMutation {
  title: String
  description: String
  body: JSON
}

input AboutMutation {
  title: String
  description: String
  body: JSON
}

input ContactMutation {
  title: String
  description: String
  body: JSON
}

input HomepageMutation {
  title: String
  description: String
  body: JSON
}

input SectionsMutation {
  title: String
  enable: Boolean
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
